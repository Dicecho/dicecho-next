.divider {
  @apply flex flex-row items-center self-stretch my-4 h-4 whitespace-nowrap;
}
.divider:before,
.divider:after {
  @apply h-px w-full flex-grow content-[''] bg-foreground/10;
}
.divider-start:before {
  @apply hidden;
}
.divider-end:after {
  @apply hidden;
}
.divider:not(:empty) {
  @apply gap-4;
}

.rating {
  @apply relative inline-flex;
}

.rating:where(input) {
  @apply cursor-pointer rounded-none;
}

.rating input {
  @apply appearance-none;
  -webkit-appearance: none;
}
.rating:where(input) {
  animation: rating-pop var(--animation-input, 0.25s) ease-out;
  @apply bg-foreground h-6 w-6 bg-opacity-100;
}
.rating .rating-hidden {
  @apply w-2 bg-transparent;
}
.rating input[type="radio"]:checked {
  background-image: none;
}

.rating input:checked ~ input,
.rating input[aria-checked="true"] ~ input {
  @apply bg-opacity-20;
}

.rating:not(.rating-read-only) input:focus-visible {
  @apply transition-transform duration-300 ease-out;
  transform: translateY(-0.125em);
}

.rating input:active:focus {
  animation: none;
}

.rating:not(.rating-read-only) input:active:focus {
  transform: translateY(-0.125em);
}

.rating-half:where(input:not(.rating-hidden)) {
  @apply w-3;
}

.rating-xs input {
  height: .75rem;
  width: .75rem
}

.rating-sm input {
  height: 1rem;
  width: 1rem
}

.rating-md input {
  height: 1.5rem;
  width: 1.5rem
}

.rating-lg input {
  height: 2.5rem;
  width: 2.5rem
}

.rating-half.rating-xs input:not(.rating-hidden) {
  width: .375rem
}

.rating-half.rating-sm input:not(.rating-hidden) {
  width: .5rem
}

.rating-half.rating-md input:not(.rating-hidden) {
  width: .75rem
}

.rating-half.rating-lg input:not(.rating-hidden) {
  width: 1.25rem
}

@keyframes rating-pop {
  0% {
    transform: translateY(-0.125em);
  }
  40% {
    transform: translateY(-0.125em);
  }
  100% {
    transform: translateY(0);
  }
}

.mask {
  mask-size: contain;
  mask-repeat: no-repeat;
  mask-position: center;
}

.mask-half-1 {
  mask-size: 200%;
  mask-position: left;
  @apply [mask-position:left] rtl:[mask-position:right];
}

.mask-half-2 {
  mask-size: 200%;
  mask-position: right;
  @apply [mask-position:right] rtl:[mask-position:left];
}

.mask-star {
  mask-image: url("data:image/svg+xml,%3csvg width='192' height='180' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 137.263-58.779 42.024 22.163-68.389L.894 68.481l72.476-.243L96 0l22.63 68.238 72.476.243-58.49 42.417 22.163 68.389z' fill-rule='evenodd'/%3e%3c/svg%3e");
}

.mask-star-2 {
  mask-image: url("data:image/svg+xml,%3csvg width='192' height='180' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 153.044-58.779 26.243 7.02-63.513L.894 68.481l63.117-13.01L96 0l31.989 55.472 63.117 13.01-43.347 47.292 7.02 63.513z' fill-rule='evenodd'/%3e%3c/svg%3e");
}

.join {
  @apply inline-flex items-stretch;
}
.join :where(.join-item) {
  border-start-end-radius: 0;
  border-end-end-radius: 0;
  border-end-start-radius: 0;
  border-start-start-radius: 0;
}
.join .join-item:not(:first-child):not(:last-child),
.join *:not(:first-child):not(:last-child) .join-item {
  border-start-end-radius: 0;
  border-end-end-radius: 0;
  border-end-start-radius: 0;
  border-start-start-radius: 0;
}

.join .join-item:first-child:not(:last-child),
.join *:first-child:not(:last-child) .join-item {
    border-start-end-radius: 0;
    border-end-end-radius: 0;
  }

.join .dropdown .join-item:first-child:not(:last-child),
.join *:first-child:not(:last-child) .dropdown .join-item {
    border-start-end-radius: inherit;
    border-end-end-radius: inherit;
  }

.join :where(.join-item:first-child:not(:last-child)),
.join :where(*:first-child:not(:last-child) .join-item) {
    border-end-start-radius: inherit;
    border-start-start-radius: inherit;
  }

.join .join-item:last-child:not(:first-child),
.join *:last-child:not(:first-child) .join-item {
    border-end-start-radius: 0;
    border-start-start-radius: 0;
  }

.join :where(.join-item:last-child:not(:first-child)),
.join :where(*:last-child:not(:first-child) .join-item) {
  border-start-end-radius: inherit;
  border-end-end-radius: inherit;
}

@supports not selector(:has(*)) {
  .join :where(.join *) {
    @apply rounded-[inherit];
  }
}

@supports selector(:has(*)) {
  .join :where(.join *:has(.join-item)) {
    @apply rounded-[inherit];
  }
}

.join {
  @apply rounded-md;
}

.join > :where(*:not(:first-child)) {
  @apply my-0 -ms-px;
}

.join-item:focus {
  @apply isolate;
}